package com.aistudio.lifehackstudio.ui.screens.companyScreenimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.aistudio.lifehackstudio.domain.companyRepository.Companyimport com.aistudio.lifehackstudio.domain.companyRepository.CompanyRepositoryimport com.aistudio.lifehackstudio.ui.screens.helpers.AppIntentimport com.aistudio.lifehackstudio.ui.screens.helpers.IntentHandlerimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.launchclass CompanyViewModel(private val companyRepository: CompanyRepository) : ViewModel(),    IntentHandler<AppIntent> {    private val _companies = MutableStateFlow<List<Company>>(emptyList())    val companies: StateFlow<List<Company>> get() = _companies    override fun getIntent(intent: AppIntent) {        when (val currentViewState = _companies.value) {            else -> handleCompanyIntent(intent, currentViewState)        }    }    private fun handleCompanyIntent(intent: AppIntent, currentViewState: List<Company>) {        when (intent) {            is AppIntent.Loading -> loadCompanyList()            else -> {}        }    }    private fun loadCompanyList() {        _companies.value = listOf(Company(isLoading = true))        viewModelScope.launch(Dispatchers.IO) {            try {                val companyList = companyRepository.getCompanyNetworkDataSource()                _companies.value = companyList            } catch (e: Exception) {                _companies.value = listOf(Company(error = e))            }        }    }}