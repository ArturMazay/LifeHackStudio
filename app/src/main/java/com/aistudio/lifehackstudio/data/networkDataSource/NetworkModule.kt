package com.aistudio.lifehackstudio.data.networkDataSourceimport com.aistudio.lifehackstudio.data.Apiimport com.aistudio.lifehackstudio.data.networkDataSource.cardCompanyNetworkDataSource.CardCompanyDataSourceimport com.aistudio.lifehackstudio.data.networkDataSource.cardCompanyNetworkDataSource.CardCompanyDataSourceImplimport com.aistudio.lifehackstudio.data.networkDataSource.companyNetworkDataSource.CompanyDataSourceimport com.aistudio.lifehackstudio.data.networkDataSource.companyNetworkDataSource.CompanyDataSourceImplimport com.google.gson.Gsonimport com.google.gson.GsonBuilderimport okhttp3.OkHttpClientimport okhttp3.logging.HttpLoggingInterceptorimport org.koin.dsl.moduleimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.util.concurrent.TimeUnitval networkModule = module {    fun provideOkHttpClient(): OkHttpClient {        val timeoutInSeconds = 120        val builder = OkHttpClient.Builder()            .connectTimeout(timeoutInSeconds.toLong(), TimeUnit.SECONDS)            .readTimeout(timeoutInSeconds.toLong(), TimeUnit.SECONDS)        val interceptor = HttpLoggingInterceptor()        interceptor.level = HttpLoggingInterceptor.Level.BODY        builder.addInterceptor(interceptor)        return builder.build()    }    fun provideGson(): Gson {        return GsonBuilder()            .setLenient()            .create()    }    fun provideRetrofit(gson: Gson, okHttpClient: OkHttpClient): Api {        return Retrofit.Builder()            .baseUrl("https://lifehack.studio")            .client(okHttpClient)            .addConverterFactory(GsonConverterFactory.create(gson))            .build()            .create(Api::class.java)    }    factory { provideGson() }    factory { provideOkHttpClient() }    factory { provideRetrofit(gson = get(), okHttpClient = get()) }    single <CompanyDataSource> { CompanyDataSourceImpl(api = get()) }    single <CardCompanyDataSource> { CardCompanyDataSourceImpl(api = get()) }}